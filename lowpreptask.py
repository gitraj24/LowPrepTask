# -*- coding: utf-8 -*-
"""LowPrepTask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8qkfQeguwHwpgg5b7fXJhByL8rS8kV8

# Task 1 - Chart Patterns

I have created the code to identify **triangle** patterns in stock charts, namely **ascending, descending and symmetric triangles.**
"""

# importing necessary libraries
import pandas as pd
!pip install yfinance
import yfinance as yf
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime
from matplotlib import pyplot
from scipy.stats import linregress
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('sample2.csv')
# df = yf.download(tickers="RELIANCE.NS", period="15y", interval="1d", auto_adjust=True)
df = df[df['Volume']!=0]
df.reset_index(drop=True, inplace=True)
df.isna().sum()
df.head(10)

"""Created a function to find pivots in the graph. These pivots can be made more strong by the increasing the range of comparison, i.e., n1 and n2"""

def pivotid(df1, l, n1, n2): #n1 n2 before and after candle l
    if l-n1 < 0 or l+n2 >= len(df1):
        return 0
    
    pividlow=1
    pividhigh=1
    for i in range(l-n1, l+n2+1):
        if(df1.Low[l]>df1.Low[i]):
            pividlow=0
        if(df1.High[l]<df1.High[i]):
            pividhigh=0
    if pividlow and pividhigh:
        return 3
    elif pividlow:
        return 1
    elif pividhigh:
        return 2
    else:
        return 0
    
df['pivot'] = df.apply(lambda x: pivotid(df, x.name, 3, 3), axis=1)

"""Pivot Candles Vizualisation"""

def pointpos(x):
    if x['pivot']==1:
        return x['Low']-1e-3
    elif x['pivot']==2:
        return x['High']+1e-3
    else:
        return np.nan

df['pointpos'] = df.apply(lambda row: pointpos(row), axis=1)

fig = go.Figure(data=[go.Candlestick(x=df.index,
                open=df['Open'],
                high=df['High'],
                low=df['Low'],
                close=df['Close'])])

fig.add_scatter(x=df.index, y=df['pointpos'], mode="markers",
                marker=dict(size=5, color="MediumPurple"),
                name="pivot")
fig.show()

backcandles= 20 # To increase the accuracy of the pattern this value may be increased
signal = [0] * len(df)
for candleid in range(backcandles, len(df)-3):
    maxim = np.array([])
    minim = np.array([])
    xxmin = np.array([])
    xxmax = np.array([])
    for i in range(candleid-backcandles, candleid+1):
        if df.iloc[i].pivot == 1:
            minim = np.append(minim, df.iloc[i].Low)
            xxmin = np.append(xxmin, i)
        if df.iloc[i].pivot == 2:
            maxim = np.append(maxim, df.iloc[i].High)
            xxmax = np.append(xxmax, i) 
    
    if (xxmax.size <3 and xxmin.size <3) or xxmax.size==0 or xxmin.size==0:
        continue
    
    slmin, intercmin, rmin, pmin, semin = linregress(xxmin, minim)
    slmax, intercmax, rmax, pmax, semax = linregress(xxmax, maxim)
        
    buy1 = 0
    sell1 = 0
    buy2 = 0
    sell2 = 0
    if abs(rmax)>=0.9 and abs(rmin)>=0.7 and abs(slmin)<=0.0001 and slmax<-0.0001: # These are the constraints to be 
      sell1 = 1                                                                    # satisfied for the chart pattern to look like a descending triangle

    if abs(rmax)>=0.9 and abs(rmin)>=0.7 and slmin>=0.0001 and abs(slmax)<=0.00001: # These are the constraints to be 
      buy1 = 1                                                                      # satisfied for the chart pattern to look like an ascending triangle
        
    if abs(rmax)>=0.9 and abs(rmin)>=0.9 and slmin>=0.0001 and slmax<=-0.0001: # This is for symmetric (or converging) triangle pattern
        check = 1
        for i in range(candleid, candleid+5):
          if(df['Close'][i]<df['Close'][candleid]):
              check = 0
        if(check==1): sell2 = 1
        
        for i in range(candleid, candleid+5):
          if(df['Close'][i]>df['Close'][candleid]):
            check = 0
        if(check==1): buy2 = 1

    if(buy1==1 or buy2==1 and sell1==0 and sell2==0): signal[candleid] = 1
    elif(buy1==0 and buy2==0 and sell1==1 or sell2==1): signal[candleid] = -1
    else: signal[candleid] = 0

"""I have created an extra function to visualize the triangle patterns on the stock chart by simply giving the index of that particular candlestick (where there is a signal), obtained from the cell above"""

backcandles = 20
candleid = 1475

maxim = np.array([])
minim = np.array([])
xxmin = np.array([])
xxmax = np.array([])

for i in range(candleid-backcandles, candleid+1):
    if df.iloc[i].pivot == 1:
        minim = np.append(minim, df.iloc[i].Low)
        xxmin = np.append(xxmin, i) 
    if df.iloc[i].pivot == 2:
        maxim = np.append(maxim, df.iloc[i].High)
        xxmax = np.append(xxmax, i)

slmin, intercmin, rmin, pmin, semin = linregress(xxmin, minim)
slmax, intercmax, rmax, pmax, semax = linregress(xxmax, maxim)

print(rmin, rmax)

dfpl = df[candleid-backcandles-10:candleid+backcandles+10]

fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                open=dfpl['Open'],
                high=dfpl['High'],
                low=dfpl['Low'],
                close=dfpl['Close'])])

fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                marker=dict(size=4, color="MediumPurple"),
                name="pivot")

xxmin = np.append(xxmin, xxmin[-1]+15)
xxmax = np.append(xxmax, xxmax[-1]+15)

fig.add_trace(go.Scatter(x=xxmin, y=slmin*xxmin + intercmin, mode='lines', name='min slope'))
fig.add_trace(go.Scatter(x=xxmax, y=slmax*xxmax + intercmax, mode='lines', name='max slope'))
fig.update_layout(xaxis_rangeslider_visible=False)
fig.show()

df['signal'] = signal
df

"""Now, I have prepared the visual representation in the candlestick chart for the buy(shown in blue color) and sell points(shown in yellow color) by changing the color of those candlesticks"""

# New dataset for indices with buy signal and sell signal
df_buy = df[df['signal']>0]
df_sell = df[df['signal']<0]

not_hi = df[df.index.isin(df_buy.index)].index
not_low = df[df.index.isin(df_sell.index)].index
df = df.drop(not_hi)
df = df.drop(not_low)

# set up figure with values not high and not low
# include candlestick with rangeselector
fig = go.Figure(go.Candlestick(x=df.index,
                open=df['Open'], high=df['High'],
                low=df['Low'], close=df['Close']))

# Setting up trace for buy candlesticks
fig.add_traces(go.Candlestick(x=df_buy.index,
                open=df_buy['Open'], high=df_buy['High'],
                low=df_buy['Low'], close=df_buy['Close']))

# Setting up trace for sell candlesticks
fig.add_traces(go.Candlestick(x=df_sell.index,
                open=df_sell['Open'], high=df_sell['High'],
                low=df_sell['Low'], close=df_sell['Close']))


color_hi_fill = 'blue'
color_hi_line = 'blue'

color_lo_fill = 'yellow'
color_lo_line = 'yellow'

fig.data[1].increasing.fillcolor = color_hi_fill
fig.data[1].increasing.line.color = color_hi_line
fig.data[1].decreasing.fillcolor = 'rgba(0,0,0,0)'
fig.data[1].decreasing.line.color = 'rgba(0,0,0,0)'

fig.data[2].decreasing.fillcolor = 'rgba(0,0,0,0)'
fig.data[2].decreasing.line.color = 'rgba(0,0,0,0)'
fig.data[2].increasing.fillcolor = color_lo_fill
fig.data[2].increasing.line.color = color_lo_line

fig.show()

"""P.S. - I have kept the accuracy of signals to be low, so that visualization is clear

#THE END !

---
"""